/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2024-05-04 04:18:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.cs336.pkg.*;
import java.io.*;
import java.util.*;
import java.sql.*;
import javax.servlet.http.*;
import javax.servlet.*;

public final class AdminManageBids_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("com.cs336.pkg");
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Computer Listings</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            padding: 0;\r\n");
      out.write("            background-color: #f4f4f4;\r\n");
      out.write("            color: #333;\r\n");
      out.write("        }\r\n");
      out.write("        h1 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        form {\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("        }\r\n");
      out.write("        form input[type=\"submit\"] {\r\n");
      out.write("            background-color: #007bff;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            border: none;\r\n");
      out.write("            padding: 10px 20px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        th, td {\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("        }\r\n");
      out.write("        th {\r\n");
      out.write("            background-color: #007bff;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("        }\r\n");
      out.write("        tr:nth-child(even) {\r\n");
      out.write("            background-color: #f2f2f2;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script>\r\n");
      out.write("    function deleteBid(bidId) {\r\n");
      out.write("        if (confirm('Are you sure you want to delete this bid?')) {\r\n");
      out.write("            window.location.href = 'AdminDeleteBid.jsp?bidId=' + bidId;\r\n");
      out.write("        }\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h1>Computer Listings</h1>\r\n");
      out.write("    <form action=\"StaffMode.jsp\">\r\n");
      out.write("        <input type=\"submit\" value=\"Main Menu\">\r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    <form action=\"SortComputers.jsp\" method=\"post\">\r\n");
      out.write("        <label for=\"sortOption\">Sort by:</label>\r\n");
      out.write("        <select id=\"sortOption\" name=\"sortOption\">\r\n");
      out.write("        	<option value=\"none\">None</option>\r\n");
      out.write("            <option value=\"current_bid\">Current Bid</option>\r\n");
      out.write("            <option value=\"list_date\">List Date</option>\r\n");
      out.write("            <option value=\"expiration_date\">Expiration Date</option>\r\n");
      out.write("            <option value=\"computer_type\">Computer Type</option>\r\n");
      out.write("            <option value=\"ram\">RAM</option>\r\n");
      out.write("            <option value=\"storage\">Storage</option>\r\n");
      out.write("        </select>\r\n");
      out.write("        <input type=\"submit\" value=\"Sort\">\r\n");
      out.write("        \r\n");
      out.write("        <!-- New filtering dropdowns -->\r\n");
      out.write("        <label for=\"filterComputerType\">Computer Type:</label>\r\n");
      out.write("        <select id=\"filterComputerType\" name=\"filterComputerType\">\r\n");
      out.write("            <option value=\"all\">All</option>\r\n");
      out.write("            <option value=\"LAPTOP\">Laptop</option>\r\n");
      out.write("            <option value=\"DESKTOP\">Desktop</option>\r\n");
      out.write("            <option value=\"ALLINONE\">All in One</option>\r\n");
      out.write("        </select>\r\n");
      out.write("\r\n");
      out.write("        <label for=\"filterPrice\">Current Bid:</label>\r\n");
      out.write("        <select id=\"filterPrice\" name=\"filterPrice\">\r\n");
      out.write("            <option value=\"all\">All</option>\r\n");
      out.write("            <option value=\"500\">Current Bid > 500</option>\r\n");
      out.write("            <option value=\"1000\">Current Bid > 1000</option>\r\n");
      out.write("        </select>\r\n");
      out.write("\r\n");
      out.write("        <label for=\"filterCpu\">CPU:</label>\r\n");
      out.write("        <select id=\"filterCpu\" name=\"filterCpu\">\r\n");
      out.write("            <option value=\"all\">All</option>\r\n");
      out.write("            <option value=\"%Intel%\">Intel</option>\r\n");
      out.write("            <option value=\"%Ryzen%\">Ryzen</option>\r\n");
      out.write("        </select>\r\n");
      out.write("        \r\n");
      out.write("        <label for=\"filterRam\">RAM:</label>\r\n");
      out.write("        <select id=\"filterRam\" name=\"filterRam\">\r\n");
      out.write("            <option value=\"all\">All</option>\r\n");
      out.write("            <option value=\"8\">RAM > 8GB</option>\r\n");
      out.write("            <option value=\"16\">RAM > 16GB</option>\r\n");
      out.write("        </select>\r\n");
      out.write("        \r\n");
      out.write("        <label for=\"filterStorage\">Storage:</label>\r\n");
      out.write("        <select id=\"filterStorage\" name=\"filterStorage\">\r\n");
      out.write("            <option value=\"all\">All</option>\r\n");
      out.write("            <option value=\"500\">Storage > 500GB</option>\r\n");
      out.write("            <option value=\"1000\">Storage > 1 TB</option>\r\n");
      out.write("        </select>\r\n");
      out.write("\r\n");
      out.write("        <input type=\"submit\" value=\"Apply Filter\">\r\n");
      out.write("        \r\n");
      out.write("    </form>\r\n");
      out.write("\r\n");
      out.write("    <table>\r\n");
      out.write("    <tr>\r\n");
      out.write("        <th>Name</th>\r\n");
      out.write("        <th>Computer Type</th>\r\n");
      out.write("        <th>RAM</th>\r\n");
      out.write("        <th>Storage</th>\r\n");
      out.write("        <th>CPU</th>\r\n");
      out.write("        <th>List Date</th>\r\n");
      out.write("        <th>Expiration Date</th>\r\n");
      out.write("        <th>Bid Amount</th>\r\n");
      out.write("        <th>Action</th> <!-- New column header -->\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");
 try {
        // Get the database connection
        ApplicationDB db = new ApplicationDB();
        Connection con = db.getConnection();

        // Create a SQL statement
        Statement stmt = con.createStatement();
        String str = "SELECT name, computer_type, ram, storage, cpu, list_date, expiration_date, bid.bid_amount, bid.bid_id FROM computers JOIN bid ON computers.item_id = bid.item_id;";
        // Run the query against the database.
        
        PreparedStatement ps = con.prepareStatement(str);            

        
        ResultSet result = ps.executeQuery();

        // Parse out the results
        while (result.next()) { 
      out.write("\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>");
      out.print( result.getString("name") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( result.getString("computer_type") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( result.getString("ram") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( result.getString("storage") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( result.getString("cpu") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( result.getString("list_date") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( result.getString("expiration_date") );
      out.write("</td>\r\n");
      out.write("                <td>");
      out.print( result.getString("bid_amount") );
      out.write("</td>\r\n");
      out.write("                <td><button onclick=\"deleteBid('");
      out.print( result.getString("bid_id") );
      out.write("')\">Delete Bid</button></td> <!-- New column data -->\r\n");
      out.write("            </tr>\r\n");
      out.write("        ");
 }
        // Close the connection.
        db.closeConnection(con);
    } catch (Exception e) {
        out.print(e);
    } 
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
