/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.100
 * Generated at: 2024-05-04 04:49:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.cs336.pkg.*;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.LocalDate;
import java.io.*;
import java.util.*;
import java.sql.*;
import javax.servlet.http.*;
import javax.servlet.*;

public final class PlaceBid_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("com.cs336.pkg");
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(3);
    _jspx_imports_classes.add("java.sql.Timestamp");
    _jspx_imports_classes.add("java.time.LocalDate");
    _jspx_imports_classes.add("java.time.LocalDateTime");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"ISO-8859-1\">\r\n");
      out.write("    <title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

Connection conn = null;
PreparedStatement pstmt = null;
ResultSet rs = null;

String username = request.getParameter("username");
String password = request.getParameter("password");

// Validate username and password
ApplicationDB db = new ApplicationDB();
conn = db.getConnection();

// Get parameters from the form
String item_id = request.getParameter("item_id");
int user_id = (Integer) session.getAttribute("user_id");
String bid_amount = request.getParameter("bid_amount");
int bid_amount_int = Integer.parseInt(bid_amount);

LocalDate time = LocalDate.now();

// Create a timestamp for the current time
Timestamp timestamp = Timestamp.valueOf(LocalDateTime.now());

// Define SQL query to insert bid into Bids table
String insertBidSQL = "INSERT INTO Bid(item_id, user_id, time, bid_amount) VALUES (?, ?, ?, ?)";
String getCurrentBidSQL = "SELECT current_bid, initial_price FROM Computers WHERE item_id = ?";
String updateCurrentBidSQL = "UPDATE Computers SET current_bid = ?, current_top_bidder = ? WHERE item_id = ?";

try {
    // Check if the new bid is higher than the current highest bid
    pstmt = conn.prepareStatement(getCurrentBidSQL);
    pstmt.setString(1, item_id);
    rs = pstmt.executeQuery();

    if (rs.next()) {
        double currentHighestBid = rs.getDouble("current_bid");
        double initialPrice = rs.getDouble("initial_price");

        // Check if bid amount is higher than current highest bid and initial price
        if (bid_amount_int > currentHighestBid && bid_amount_int >= initialPrice) {
            // Check expiration date of the item
            String getExpirationDateSQL = "SELECT expiration_date FROM Computers WHERE item_id = ?";
            pstmt = conn.prepareStatement(getExpirationDateSQL);
            pstmt.setString(1, item_id);
            ResultSet expirationDateResult = pstmt.executeQuery();

            if (expirationDateResult.next()) {
                Timestamp expirationTimestamp = expirationDateResult.getTimestamp("expiration_date");

                // Compare current time with expiration time
                Timestamp currentTimestamp = Timestamp.valueOf(LocalDateTime.now());
                if (currentTimestamp.before(expirationTimestamp)) {
                    // Proceed with placing the bid
                    pstmt = conn.prepareStatement(insertBidSQL, Statement.RETURN_GENERATED_KEYS);
                    pstmt.setString(1, item_id);
                    pstmt.setInt(2, user_id);
                    pstmt.setTimestamp(3, currentTimestamp);
                    pstmt.setInt(4, bid_amount_int);

                    // Execute the insert query
                    int affectedRows = pstmt.executeUpdate();

                    if (affectedRows > 0) {
                        // Retrieve the generated keys and update current bid
                        ResultSet generatedKeys = pstmt.getGeneratedKeys();
                        if (generatedKeys.next()) {
                            int generatedBidId = generatedKeys.getInt(1);

                            // Update the current bid in the Computers table
                            pstmt = conn.prepareStatement(updateCurrentBidSQL);
                            pstmt.setInt(1, bid_amount_int);
                            pstmt.setInt(2, user_id); // Set the current top bidder
                            pstmt.setString(3, item_id);
                            pstmt.executeUpdate();
                        }
                    }
                } else {
                    // Handle the case where the auction has expired
                    // For example, redirect the user back with an error message
                    response.sendRedirect("BidError.jsp?error=expired");
                }
            }
        } else {
            // Handle the case where the bid is not higher than the current highest bid or below the initial price
            // For example, redirect the user back with an error message
            response.sendRedirect("BidError.jsp?error=invalid");
        }
    }

    response.sendRedirect("BrowseItems.jsp");
} catch (Exception e) {
    e.printStackTrace();
    // Handle any exceptions here
} finally {
    // Close the database connection and statements
    try {
        if (rs != null) rs.close();
        if (pstmt != null) pstmt.close();
        if (conn != null) conn.close();
    } catch (SQLException e) {
        e.printStackTrace();
    }
}


      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
